
/**
 * 
 * @author charlie
 * @version 0.1
 */
@VirtualModel(uri="http://www.openflexo.org/projects/2017/9/Untitled_1505918219989/Demo.fml")
public class Demo {

  @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)  
  public FlexoConceptInstanceType<Directory> root;

  @CreationScheme  
  Demo:create() {  
    root = Directory.create(null);    
    root.name = "[root]";  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  

  @ActionScheme  
  List<FlexoConceptInstanceType<Element>> allElements() {  
    return this.SelectFlexoConceptInstance(type=Element);  
  }  


  @FlexoConcept  
  public class Directory extends Element  {  
  
    @CreationScheme    
    Directory:create(FlexoConceptInstanceType<Directory> parent) {    
      name = "newDirectory";      
      parent = parameters.parent;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    public FlexoConceptInstanceType<File> addFile() {    
      FlexoConceptInstanceType<File> result = File.create(this);      
      this.firePropertyChange getChildren()      
      container.firePropertyChange allElements()      
      return result;    
    }    
  
    @ActionScheme    
    public FlexoConceptInstanceType<Directory> addDirectory() {    
      FlexoConceptInstanceType<Directory> result = Directory.create(this);      
      this.firePropertyChange getChildren()      
      container.firePropertyChange allElements()      
      return result;    
    }    
  
    @ActionScheme    
    public Void deleteElement(FlexoConceptInstanceType<Element> element) {    
      delete parameters.element      
      this.firePropertyChange getChildren()      
      container.firePropertyChange allElements()    
    }    
  
    @ActionScheme    
    List<FlexoConceptInstanceType<Element>> getChildren() {    
      return container.SelectFlexoConceptInstance(type=Element,where=where=(selected.parent = this));    
    }    
  
  }  

  @FlexoConcept  
  public class Element {  
  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String name;  
    @FlexoConceptInstanceRole(cardinality=One,readOnly=false)    
    public FlexoConceptInstanceType<Directory> parent;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class File extends Element  {  
  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String icon;  
  
    @CreationScheme    
    File:create(FlexoConceptInstanceType<Directory> parent) {    
      name = "newFile";      
      icon = "portrait";      
      parent = parameters.parent;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
